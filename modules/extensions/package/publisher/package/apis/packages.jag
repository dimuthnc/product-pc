<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 Description: Invoke routed api endpoints
 Filename : packages.jag
 * custom api to manage operations

 ENDPOINTS:
 CREATE
 /assets/package/apis/packages

 */
require('/modules/publisher.js').exec(function (ctx) {
    importPackage(org.wso2.carbon.pc.core.assets);
    var log = new Log('package_api_endpoints');
    var responseProcessor = require('utils').response;
    var ref = require('utils').time;
    var res = ctx.response;
    var req = ctx.request;
    var session = ctx.session;
    var uriMatcher = new URIMatcher(req.getRequestURI());
    var CREATE_URL = '/{context}/assets/package/apis/packages';
    var UPDATE_URL = '/{context}/assets/package/apis/packages/{packageId}';
    var GET_BPMN_DIAGRAM_URL = '/{context}/assets/package/apis/packages/resources/bpmn/';
    var GET_PACKAGE_ARCHIVE_URL = '/{context}/assets/package/apis/packages/resources/archive/';
    var method = req.getMethod();  
    var userName = user.username;
    var requestProcessData = req.getAllParameters('UTF-8');
    switch (method) {
        case 'POST':
            var packageInputStream = Packages.java.io.InputStream;
            var imageInputStream = Packages.java.io.InputStream;

            //get the uploaded zip file.
            var files = req.getAllFiles();
            if(files != null){
                var package_file = files["package_file"];
                var image_file = files["images_thumbnail"];
                if(requestProcessData._tags == null){
                    requestProcessData._tags = "";
                }
                if(requestProcessData.description == null){
                    requestProcessData.description = "";
                }
                if(package_file != null){
                    packageInputStream = package_file.getStream().getStream();
                } else {
                    packageInputStream = null;
                }

                if(image_file != null){
                    imageInputStream = image_file.getStream().getStream();
                } else{
                    imageInputStream = null;
                }
            } else {
                packageInputStream = null;
                imageInputStream = null;
            }
            
            // POST endpoints
            if (uriMatcher.match(CREATE_URL)) {//to create package
                try {
                    var packageInstance = Package();
                    var assetCreationResponse = packageInstance.create(requestProcessData.overview_name, requestProcessData.overview_version, userName, 
                                            requestProcessData.overview_description, ref.getCurrentTime(), requestProcessData._tags,
                                            requestProcessData.package_file_name, imageInputStream, packageInputStream);
                    var newAsset= parse(String(assetCreationResponse));
                    
                    if(newAsset.error == true){
                        return responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'error on create asset', res, 'Failed to create asset of type: ' + options.type, newAsset.message, []);
                    }

                    response = responseProcessor.buildSuccessResponseDefault(constants.STATUS_CODES.CREATED, res, newAsset);
                    response.addHeader('Location', req.getRequestURI() + '/' + newAsset.packageId + '?type=package');
                    return; 
                } catch (e) {
                    if (e.hasOwnProperty('message') && e.hasOwnProperty('code')) {
                        log.error("Error while creating package for the request due to " + e.message);

                        response = responseProcessor.buildErrorResponseDefault(e.code, 'error on create package', res,
                                        'Failed to create package of type: ' + options.type, e.message, []);
                        return;
                    }
                    log.error(e.message, e);
                    response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'error on create package', res, 'Failed to create package of type: ' + options.type, 'more information on create package error', []);
                    if (log.isDebugEnabled()) {
                        log.debug("Error while creating package for the request : " + e);
                    }
                }
            } else if (uriMatcher.match(UPDATE_URL)) {//to create package
                try {
                    
                    var packageInstance = Package();
                    var assetUpdateResponse = packageInstance.update(requestProcessData.packageName, requestProcessData.packageVersion, userName, 
                                            requestProcessData.overview_description, requestProcessData.package_file_name, 
                                            imageInputStream, packageInputStream);
                    var updatedAsset = parse(String(assetUpdateResponse));
                    
                    if(updatedAsset.error == true){
                        return responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'error on update asset', res, 'Failed to update asset of type: ' + options.type, updatedAsset.message, []);
                    }

                    response = responseProcessor.buildSuccessResponseDefault(constants.STATUS_CODES.CREATED, res, updatedAsset);
                    response.addHeader('Location', req.getRequestURI() + '/' + updatedAsset.packageId + '?type=package');
                    return; 
                } catch (e) {
                    if (e.hasOwnProperty('message') && e.hasOwnProperty('code')) {
                        log.error("Error while updating package for the request due to " + e.message);

                        response = responseProcessor.buildErrorResponseDefault(e.code, 'error on update package', res,
                                        'Failed to update package of type: ' + options.type, e.message, []);
                        return;
                    }
                    log.error(e.message, e);
                    response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.INTERNAL_SERVER_ERROR, 'error on update package', res, 'Failed to update package of type: ' + options.type, 'more information on update package error', []);
                    if (log.isDebugEnabled()) {
                        log.debug("Error while updating package for the request : " + e);
                    }
                }
            } 
        break;
        case 'GET':// POST endpoints
            if (uriMatcher.match(GET_BPMN_DIAGRAM_URL)) {//to create package
                try {
                    var packageInstance = Package();
                    var bpmnData = packageInstance.getBpmnImage(requestProcessData.packageName,requestProcessData.packageVersion,requestProcessData.bpmnResourcePath);
                    var responseObj = {};
                    responseObj.error = false;
                    responseObj.content = bpmnData;
                    response = responseProcessor.buildSuccessResponseDefault(constants.STATUS_CODES.OK, res, responseObj);
                } catch (e) {
                    log.error(e.message, e);
                    var responseObj = {};
                    responseObj.error = true;
                    responseObj.content = "Error occurred while getting bpmn diagram";
                    response = responseProcessor.buildErrorResponseDefault(e.code, 'error on getting bpmn diagram ', res, responseObj);
                }
            } else  if (uriMatcher.match(GET_PACKAGE_ARCHIVE_URL)) {//to create package
                try {
                    var packageInstance = Package();
                    var packageFileDate = packageInstance.downloadPackageFile(requestProcessData.packageName,requestProcessData.packageVersion,requestProcessData.bpmnResourcePath);
                    var responseObj = {};
                    responseObj.error = false;
                    responseObj.content = packageFileDate;
                    response = responseProcessor.buildSuccessResponseDefault(constants.STATUS_CODES.OK, res, responseObj);
                } catch (e) {
                    log.error(e.message, e);
                    var responseObj = {};
                    responseObj.error = true;
                    responseObj.content = "Error occurred while getting package archive file";
                    response = responseProcessor.buildErrorResponseDefault(e.code, 'error on getting bpmn diagram ', res, responseObj);
                }
            }
        break;
        default://other un-implemented endpoints
            response = responseProcessor.buildErrorResponseDefault(constants.STATUS_CODES.NOT_IMPLEMENTED, 'Not Implemented API endpoints', res, 'The endpoint that you have requested is not implemented for the ' + method + ' method.Try making the request with the appropriate verb' + '(hint: create/update operations use POST).', []);
    }
}, request, response, session);
%>
